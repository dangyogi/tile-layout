# layouts.yaml

---

row_infinite:
    parameters: [tile]
    type: repeat
    step:
        type: place
        tile: tile
    increment: ["multi_getattr(tile, 'skip_x') + plan.grout_gap", 0]

row_n:
    parameters: [tile, count]
    type: repeat
    step:
        type: place
        tile: tile
    increment: ["multi_getattr(tile, 'skip_x') + plan.grout_gap", 0]
    times: count

stepped:
    parameters: [tile, percent_offset]
    constants:
        x: multi_getattr(tile, 'skip_x') + plan.grout_gap
        y: multi_getattr(tile, 'skip_y') + plan.grout_gap
        percent_left: 1 - percent_offset
    type: repeat
    step:
        type: row_infinite
        tile: tile
    increment: [-x * percent_left, y]

stacked:
    parameters: [tile]
    type: stepped
    tile: tile
    percent_offset: 0

hopscotch:
    parameters: [tile_a, tile_b, right]
    constants:
        ax: multi_getattr(tile_a, 'skip_x') + plan.grout_gap
        a_skip_y: multi_getattr(tile_a, 'skip_y')
        ay: a_skip_y + plan.grout_gap
        bx: multi_getattr(tile_b, 'skip_x') + plan.grout_gap
        b_skip_y: multi_getattr(tile_b, 'skip_y')
        by: b_skip_y + plan.grout_gap
        conditionals:
            - test: right
              true:
                  inc: [ax, -by]
                  b_placement: [0, ay]
                  outer_inc: [bx, ay]
              false:
                  inc: [ax, by]
                  b_placement: [-bx, a_skip_y - b_skip_y]
                  outer_inc: [-bx, ay]
    type: repeat
    step:
        type: sequence
        steps:
            - type: repeat
              step:
                  type: place
                  tile: tile_a
              increment: inc
            - type: repeat
              step:
                  type: place
                  tile: tile_b
              start: b_placement
              increment: inc
    increment: outer_inc

herringbone:
    parameters: [tile, right]
    type: hopscotch
    tile_a: tile
    tile_b: tile.flipped

checkerboard:
    parameters: [tile_a, tile_b]
    constants:
        ay: multi_getattr(tile_a, 'skip_y') + plan.grout_gap
        by: multi_getattr(tile_b, 'skip_y') + plan.grout_gap
        skip_x: multi_getattr(tile_a, 'skip_x') + multi_getattr(tile_b, 'skip_x') +
                  2 * plan.grout_gap
    type: sequence
    steps:
        - type: repeat
          step:
              type: repeat
              step:
                  type: place
                  tile: tile_a
              increment: [skip_x, 0]
          increment: [-skip_x / 2, ay]
        - type: repeat
          step:
              type: repeat
              step:
                  type: place
                  tile: tile_b
              increment: [skip_x, 0]
              start: [skip_x / 2, 0]
          increment: [-skip_x / 2, by]

box:
    parameters: [tile, num_x, num_y, start]
    type: repeat
    step:
        type: repeat
        step:
            type: place
            tile: tile
        increment: ["multi_getattr(tile, 'skip_x') + plan.grout_gap", 0]
        times: num_x
    increment: [0, "multi_getattr(tile, 'skip_y') + plan.grout_gap"]
    times: num_y
    start: start

border:
    parameters: [tile, num_x, num_y, start_x, start_y]
    constants:
        x: multi_getattr(tile, 'skip_x') + plan.grout_gap
        y: multi_getattr(tile, 'skip_y') + plan.grout_gap
    type: sequence
    steps:
        - type: repeat  # bottom
          step:
              type: place
              tile: tile
          increment: [x, 0]
          start: [start_x, start_y]
          times: num_x
        - type: repeat  # top
          step:
              type: place
              tile: tile
          increment: [x, 0]
          start: [start_x,
                  start_y + y * (num_y - 1)]
          times: num_x
        - type: repeat  # left
          step:
              type: place
              tile: tile
          increment: [0, y]
          start: [start_x, start_y + y]
          times: num_y - 2
        - type: repeat  # right
          step:
              type: place
              tile: tile
          increment: [0, y]
          start: [start_x + x * (num_x - 1), start_y + y]
          times: num_y - 2

flower:
    parameters: [tile]
    type: sequence
    steps:
        - type: place
          tile: tile
          angle: 90
          index: 3
          save:
              next_x: next_x
              next_y: next_y
        - type: place
          tile: tile
          angle: 180
          index: 2
          offset: [next_x, 0]
        - type: place
          tile: tile
          angle: 0
          index: 0
          offset: [0, next_y]
        - type: place
          tile: tile
          angle: -90
          index: 1
          offset: [next_x, next_y]
