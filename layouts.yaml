# layouts.yaml

---

lay_row:
    description: >
      Lays one row of the `step` pattern.  If count is provided, that many tiles are layed.
      Otherwise, the row will extend to the left and right edges of the wall.
    parameters: [step, num_x, index_start]
    defaults:
        num_x: null
        index_start: 0
    constants:
        increment_x: plan.get_inc_xy(step, constants)[0]
    type: repeat
    step: step
    increment: [increment_x, 0]
    times: num_x
    index_start: index_start

stepped:
    description: >
      A stepped pattern with each row starting at an offset from the prior row.

      The offset is percent_offset * the width of the `step` (including the grout_gap).
      
      The percent_offset defaults to 0 (for a stacked pattern).
    parameters: [step, percent_offset, num_x, num_y, start_xy]
    defaults:
        percent_offset: 0
        num_x: null
        num_y: null
        start_xy: [0, 0]
    constants:
        increment_xy: plan.get_inc_xy(step, constants)
        x: increment_xy[0]
        y: increment_xy[1]
        conditionals:
            - test: percent_offset == 0
              true:
                x_inc: 0
              false:
                x_inc: x * percent_offset - x
    type: repeat
    step:
        type: lay_row
        step: step
        num_x: num_x
        index_start: index * num_x if num_x is not None else 0
    increment: [x_inc, y]
    times: num_y
    start: start_xy

hopscotch:
    description: >
      A hopscotch pattern.

      If right is true step_b is placed to right (clockwise) of each corner of step_a.

      If right is false step_b is placed to left (counter-clockwise) of each corner of
      step_a.

      Note that reversing the order of the steps also reverses right/left.
    parameters: [step_a, step_b, right]
    defaults:
        right: false
    constants:
        aincrement_xy: plan.get_inc_xy(step_a, constants)
        ax: aincrement_xy[0]
        ay: aincrement_xy[1]
        bincrement_xy: plan.get_inc_xy(step_b, constants)
        bx: bincrement_xy[0]
        by: bincrement_xy[1]
        conditionals:
            - test: right
              true:
                  inc: [ax, -by]
                  b_placement: [-bx, 0]
                  outer_inc: [-(ax - bx), ay + by]
              false:
                  inc: [ax + bx, -(ay - by)]
                  b_placement: [0, -by]
                  outer_inc: [-bx, ay]
    type: repeat
    step:
        type: sequence
        steps:
            - type: repeat
              step: step_a
              increment: inc
            - type: repeat
              step: step_b
              start: b_placement
              increment: inc
    increment: outer_inc

herringbone:
    description: >
      A herringbone pattern.

      If right is true the tile_vert is placed to right (clockwise) from each corner
      of the tile_horz.

      If right is false the vert_tile_vert is placed to left (counter-clockwise) from each
      corner of the tile_horz.
    parameters: [tile_horz, tile_vert, right]
    defaults:
        right: true
        tile_vert: tile_horz.flipped
    type: hopscotch
    step_a:
        type: place
        tile: tile_horz
    step_b:
        type: place
        tile: tile_vert
    right: right

basketweave:
    description: >
      A basketweave pattern.  This is a double herringbone, where each tile is doubled.

      If right is true the tile_vert is placed to right (clockwise) from each corner
      of the tile_horz.

      If right is false the vert_tile_vert is placed to left (counter-clockwise) from each
      corner of the tile_horz.
    parameters: [tile_horz, tile_vert, num_horz, num_vert, right]
    defaults:
        right: true
        tile_vert: tile_horz.flipped
        num_horz: 2
        num_vert: 2
    type: hopscotch
    step_a:
        type: repeat
        step:
            type: place
            tile: tile_horz
        increment: [0, "multi_getattr(tile_horz, 'skip_y') + plan.grout_gap"]
        times: num_horz
    step_b:
        type: repeat
        step:
            type: place
            tile: tile_vert
        increment: ["multi_getattr(tile_vert, 'skip_x') + plan.grout_gap", 0]
        times: num_vert
    right: right

do_new_basketweave:
    description: >
        Rect_a and rect_b should be rotated 90 degrees from each other for the horizontal
        and vertical strands of the basketweave.

        The tile_square takes up the space in the corners left by the different vertical
        and horizontal dimensions of the rectangles.  The size of the square should be the
        difference in dimensions / 2 minus one grout_gap.
    parameters: [rect_a, rect_b, tile_square]
    trace: [constants, use]
    constants:
        ainc: plan.get_inc_xy(rect_a, constants, "rect_a")   # includes all but last grout gap
        ainc_x: ainc[0]
        ainc_y: ainc[1]
        binc: plan.get_inc_xy(rect_b, constants, "rect_b")   # includes all but last grout gap
        binc_x: binc[0]
        binc_y: binc[1]
    type: sequence
    steps:
        - type: repeat         # fill wall with rect_a and rect_b
          step:
              type: sequence   # for horz row of both rect_a and rect_b
              steps:
                  - type: repeat    # horz row of rect_a, leaving a gap for rect_b
                    step: rect_a
                    increment: [ainc_x + binc_x, 0]
                  - type: repeat    # horz row of rect_b, filling the gaps above
                    step: rect_b
                    increment: [ainc_x + binc_x, 0]
                    delta: [ainc_x, (ainc_y - binc_y) / 2]
          increment: [-ainc_x + (ainc_x - binc_x) / 2, (ainc_y + binc_y) / 2]
        - type: repeat
          step:
              type: repeat
              step:
                  type: place
                  tile: tile_square
              increment: [binc_x + square_inc_x, 0]
          increment: [0, square_inc_y + ainc_y]
          use:
              square_inc_x: multi_getattr(tile_square, 'skip_x') + plan.grout_gap
              square_inc_y: multi_getattr(tile_square, 'skip_y') + plan.grout_gap
              offset_y: ainc_y
          skip: tile_square is None

new_basketweave:
    description: |
        For the size of tile_square:

        rect_a_height = num_strands * tile_horz.height + (num_strands - 1) * grout_gap
        rect_b_height = tile_vert.height

        tile_square.height = abs(rect_a_height - rect_b_height) / 2 - grout_gap
    parameters: [tile_horz, tile_vert, num_strands, tile_square]
    defaults:
        tile_vert: tile_horz.flipped
    type: do_new_basketweave
    rect_a:   # num_strands tile_horz stacked on top of each other.
        type: repeat
        step:
            type: place
            tile: tile_horz
        increment: [0, "multi_getattr(tile_horz, 'skip_y') + plan.grout_gap"]
        times: num_strands
    rect_b:   # num_strands tile_vert stacked side by side.
        type: repeat
        step:
            type: place
            tile: tile_vert
        increment: ["multi_getattr(tile_vert, 'skip_x') + plan.grout_gap", 0]
        times: num_strands
    tile_square: tile_square

new_basketweave_mixed:
    description: |
        For the size of tile_square:

        rect_a_height = num_strands * tile_horz.height + (num_strands - 1) * grout_gap
        rect_b_height = tile_vert.height

        tile_square.height = abs(rect_a_height - rect_b_height) / 2 - grout_gap
    parameters: [tile_a, tile_b, tile_c, tile_square]
    type: do_new_basketweave
    rect_a:
        type: mixed_vert
        tile_a: tile_a
        tile_b: tile_b
        tile_c: tile_c
    rect_b:
        type: mixed_horz
        tile_a: tile_a.flipped
        tile_b: tile_b.flipped
        tile_c: tile_c.flipped
    tile_square: tile_square

mixed_vert:
    parameters: [tile_a, tile_b, tile_c]
    constants:
        ainc_y: tile_a.skip_y + plan.grout_gap
        binc_y: tile_b.skip_y + plan.grout_gap
    type: sequence
    steps:
        - type: place
          tile: tile_a
        - type: place
          tile: tile_b
          delta: [0, ainc_y]
        - type: place
          tile: tile_c
          delta: [0, ainc_y + binc_y]

mixed_horz:
    parameters: [tile_a, tile_b, tile_c]
    constants:
        ainc_x: tile_a.skip_x + plan.grout_gap
        binc_x: tile_b.skip_x + plan.grout_gap
    type: sequence
    steps:
        - type: place
          tile: tile_a
        - type: place
          tile: tile_b
          delta: [ainc_x, 0]
        - type: place
          tile: tile_c
          delta: [ainc_x + binc_x, 0]

box:
    description: >
      A solid rectangle of `step`s num_x steps wide, and num_y steps high.
    parameters: [step, num_x, num_y, start]
    defaults:
        num_x: null
        num_y: null
        start: [0, 0]
    constants:
        increment_xy: plan.get_inc_xy(step, constants)
        x: increment_xy[0]
        y: increment_xy[1]
    type: repeat
    step:
        type: repeat
        step: step
        increment: [x, 0]
        times: num_x
    increment: [0, y]
    times: num_y
    start: start

checkerboard:
    description: >
      A rectangle filled with steps cycling both horizontally and vertically.
    parameters: [steps, num_x, num_y, start]
    defaults:
        num_x: null
        num_y: null
        start: [0, 0]
    constants:
        increment_xy: plan.get_inc_xy(steps, constants)
        x: increment_xy[0]
        y: increment_xy[1]
    type: repeat
    step:
        type: repeat
        step: steps
        increment: [x, 0]
        times: num_x
        index_start: index
    increment: [0, y]
    times: num_y
    start: start

border:
    description: >
      A border of single steps num_x steps wide, and num_y steps high.
    parameters: [step_horz, step_vert, num_x, num_y, start_x, start_y]
    defaults:
        start_x: 0
        start_y: 0
        step_vert: step_horz
    constants:
        hincrement_xy: plan.get_inc_xy(step_horz, constants)
        hx: hincrement_xy[0]
        hy: hincrement_xy[1]
        vincrement_xy: plan.get_inc_xy(step_vert, constants)
        vx: vincrement_xy[0]
        vy: vincrement_xy[1]
    type: sequence
    steps:
        - type: repeat  # bottom
          step: step_horz
          increment: [hx, 0]
          start: [start_x, start_y]
          times: num_x
        - type: repeat  # top
          step: step_horz
          increment: [hx, 0]
          start: [start_x,
                  start_y + hy + vy * (num_y - 2)]
          times: num_x
        - type: repeat  # left
          step: step_vert
          increment: [0, vy]
          start: [start_x, start_y + hy]
          times: num_y - 2
        - type: repeat  # right
          step: step_vert
          increment: [0, vy]
          start: [start_x + hx * (num_x - 1), start_y + hy]
          times: num_y - 2

automatic_border:
    description: >
      A border of a single layer of tiles around a center step formed by either butting the left
      and right vertical tiles against the top and bottom rows, or with mitre joints.

      start_x, start_y specifies the corner of the center piece.  The border extends
      outward from there.
    parameters: [center_size, tile, start_x, start_y, mitre]
    defaults:
        start_x: 0
        start_y: 0
        mitre: false
    constants:
        tile_horz: tile
        tile_vert: tile.flipped
        center_width: center_size[0]
        center_height: center_size[1]
        gg: plan.grout_gap
        width_tile: tile.skip_y + gg
        length_tile: tile.skip_x + gg
        num_horz: max(0, (center_width + 2 * width_tile) // length_tile - 1)
        horz_clip: (center_width + 2 * width_tile - num_horz * length_tile - gg) / 2
        border_start_x: start_x - width_tile
        border_start_y: start_y - width_tile
        conditionals:
            - test: mitre
              true:
                  num_vert: max(0, (center_height + 2 * width_tile) // length_tile - 1)
                  vert_clip: (center_height + 2 * width_tile - num_vert * length_tile - gg) / 2
                  lower_left_horz_clip_tile: tile_horz.clip(horz_clip, 'upper_left', gg)
                  lower_right_horz_clip_tile: tile_horz.clip(horz_clip, 'upper_right', gg)
                  upper_left_horz_clip_tile: tile_horz.clip(horz_clip, 'lower_left', gg)
                  upper_right_horz_clip_tile: tile_horz.clip(horz_clip, 'lower_right', gg)
                  lower_left_vert_clip_tile: tile_vert.clip(vert_clip, 'lower_right', gg)
                  lower_right_vert_clip_tile: tile_vert.clip(vert_clip, 'lower_left', gg)
                  upper_left_vert_clip_tile: tile_vert.clip(vert_clip, 'upper_right', gg)
                  upper_right_vert_clip_tile: tile_vert.clip(vert_clip, 'upper_left', gg)
                  sides_start_y: border_start_y
              false:
                  num_vert: max(0, center_height // length_tile - 1)
                  vert_clip: (center_height - num_vert * length_tile - gg) / 2
                  lower_left_horz_clip_tile: tile_horz.clip(horz_clip)
                  lower_right_horz_clip_tile: lower_left_horz_clip_tile
                  upper_left_horz_clip_tile: lower_left_horz_clip_tile
                  upper_right_horz_clip_tile: upper_left_horz_clip_tile
                  lower_left_vert_clip_tile: tile_vert.clip(vert_clip)
                  lower_right_vert_clip_tile: lower_left_vert_clip_tile
                  upper_left_vert_clip_tile: lower_left_vert_clip_tile
                  upper_right_vert_clip_tile: upper_left_vert_clip_tile
                  sides_start_y: border_start_y + width_tile
    type: sequence
    steps:
        # bottom
        - type: border_row
          tile_first: lower_left_horz_clip_tile
          tile_middle: tile_horz
          tile_last: lower_right_horz_clip_tile
          num_middle: num_horz
          start_x: border_start_x
          start_y: border_start_y

        # left
        - type: border_column
          tile_first: lower_left_vert_clip_tile
          tile_middle: tile_vert
          tile_last: upper_left_vert_clip_tile
          num_middle: num_vert
          start_x: border_start_x
          start_y: sides_start_y

        # right
        - type: border_column
          tile_first: lower_right_vert_clip_tile
          tile_middle: tile_vert
          tile_last: upper_right_vert_clip_tile
          num_middle: num_vert
          start_x: start_x + center_width + gg
          start_y: sides_start_y

        # top
        - type: border_row
          tile_first: upper_left_horz_clip_tile
          tile_middle: tile_horz
          tile_last: upper_right_horz_clip_tile
          num_middle: num_horz
          start_x: border_start_x
          start_y: start_y + center_height + gg

border_row:
    description: >
      Lays one row of tiles starting with one tile_first, then num_middle tile_middles
      and finally one tile_last.
    parameters: [tile_first, tile_middle, tile_last, num_middle, start_x, start_y]
    defaults:
        start_x: 0
        start_y: 0
        tile_last: tile_first
    type: sequence
    steps:
        - type: place
          tile: tile_first
          delta: [start_x, start_y]
          save:
              saved_inc_x: inc_x + start_x + offset_x
        - type: repeat
          step:
              type: place
              tile: tile_middle
          increment: [tile_middle.skip_x + plan.grout_gap, 0]
          use:
              offset_x: saved_inc_x
              offset_y: start_y
          times: num_middle
          save:
              saved_inc_x: inc_x + offset_x
        - type: place
          tile: tile_last
          use:
              offset_x: saved_inc_x
              offset_y: start_y

border_column:
    description: >
      Lays one column of tiles starting with one tile_first, then num_middle tile_middles
      and finally one tile_last.
    parameters: [tile_first, tile_middle, tile_last, num_middle, start_x, start_y]
    defaults:
        start_x: 0
        start_y: 0
        tile_last: tile_first
    type: sequence
    steps:
        - type: place
          tile: tile_first
          delta: [start_x, start_y]
          save:
              saved_inc_y: inc_y + start_y + offset_y
        - type: repeat
          step:
              type: place
              tile: tile_middle
          increment: [0, tile_middle.skip_y + plan.grout_gap]
          use:
              offset_x: start_x
              offset_y: saved_inc_y
          times: num_middle
          save:
              saved_inc_y: inc_y + offset_y
        - type: place
          tile: tile_last
          use:
              offset_x: start_x
              offset_y: saved_inc_y

flower:
    description: >
      Four tiles in a square (2x2 tiles) all sharing the lower-right corner of the
      original tile.
    parameters: [tile]
    type: sequence
    steps:
        - type: place
          tile: tile
          angle: 90
          index: 3
          save:
              first_inc_x: inc_x
              first_inc_y: inc_y
        - type: place
          tile: tile
          angle: 180
          index: 2
          delta: [first_inc_x, 0]
        - type: place
          tile: tile
          angle: 0
          index: 0
          delta: [0, first_inc_y]
        - type: place
          tile: tile
          angle: -90
          index: 1
          delta: [first_inc_x, first_inc_y]
